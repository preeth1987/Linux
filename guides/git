<START>
============================================
generate patch from prev commit
git format-patch -n HEAD^

diff of last commit
git diff HEAD^ HEAD

diff of only file
git diff HEAD^ HEAD -- ./file

Names and status of changed files
git diff HEAD~5 HEAD --name-status

Diff of a particular commit
git diff d9d9df04^ d9d9df04

3 way merge
git am -3 < changes.patch

Unstage the added file without loosing changes
git reset <filename>

To move from one commit branch to other follow below, later checkout to other commit branch
1. Commit changes
git commit
OR
2. Stash changes
git stash

List stashs:
git stash list 

To apply specific changes from stash
git stash apply stash@{2}

To drop(delete) stash
git stash drop stash@{2}


<END>
<START>
============================================
Updating forked repo from upstream master

git remote add upstream https://github.com/Azure/sonic-utilities.git

git fetch upstream

git checkout master

git rebase upstream/master

#Resolve all conflicts, gmerge; git rebase --continue ;

git push -f origin master


<END>
<START>
======================================================================

Creating multiple branch for each commit from feature branch, merging

git checkout feature_branch
git checkout -b commit1
make your changes in commit1

If new changes merged in feature_branch
git commit changes in commit1 branch

git checkout feature_branch
git pull --rebase # resolve any conflicts and do git add

git checkout commit1
git rebase master #resolve any conflicts manually if any and do git add.
git commit final changes.
git push

<END>
<START>
======================================================================

Revert to a specific commit:

git reset --hard <commit-id> #resets head to specific commit discarding all changes

git reset --soft <commit-id> #resets head to specific commit retaining changes locally


Revert a specific commit:

git revert <commit-id>

<END>
<START>
======================================================================

You can checkout a commit by a specific date using rev-parse like this:

git checkout 'master@{1979-02-26 18:30:00}'


git checkout `git rev-list -n 1 --first-parent --before="2009-07-27 13:37" master`
# Note the --first-parent if you want only your history and not versions brought in by a merge. That's what you usually want.

<END>
<START>
======================================================================

