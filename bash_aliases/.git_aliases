re='^[0-9]+$'

alias gits="git status"
alias gitss="git status -s"
alias glsco='git diff --name-only'
alias gituncommit='git reset --soft HEAD^'
alias gcbranch='git symbolic-ref --short -q HEAD'
alias cbranch=gcbranch
alias glbranch='git branch'
alias lbranch=glbranch
alias rbranch='git branch -r'

gpv() {
	SAVED="$@"
	set -- $( lsview )
	export VIEW
	select VIEW
	do
		if [ -n "$VIEW" ] ; then set -- $SAVED ; shift ; cd $VIEW; echo "View: $VIEW";
			export BRANCH=$( cbranch )
			echo "Branch: $BRANCH"
			setup_cscope;
			setrepo_vars; 
			break; 
		fi
		if [ "$REPLY" = "0" ] ; then break ; fi
	done
}

gpb() {
	SAVED="$@"
	set -- $( lbranch | grep -v "^*")
	export BRANCH
	select BRANCH
	do
		if [ -n "$BRANCH" ] ; then 
			set -- $SAVED ; 
			shift ; 
			git checkout $BRANCH ;
			echo "View: $VIEW";
			echo "Branch: $BRANCH";
			setup_cscope;
			break; 
		fi
		if [ "$REPLY" = "0" ] ; then break ; fi
	done
}

gitco ()
{
    git checkout $*
}
gitci ()
{
    git commit $* -m "commit";
    git push
}
gitr ()
{
    #git pull origin master
	git pull --rebase
}
gitlt ()
{
	git tag -l | less
}
gitst ()
{
	git checkout -b stable $*
}
gvdiffl ()
{
	git difftool master $*
}
gvdiff ()
{
	git difftool $*
}
gpatch ()
{
	patch -p1 --merge < $*
}
ghist ()
{
	git log --pretty=format:"%h - %an, %ar : %s"
}
ghist1 ()
{
	git log --stat
}
ghist2 ()
{
	git log -p -2
}

# Log of commit messages in one line
glog() {
    #git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
    git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=format:%m-%d-%Y:%H:%M:%S
}

# Log of commit messages in one line
gflog() {
    if [ -z $1 ]
        then echo "Need the file name"
    else
        git log -p $1
		#git log -p $1 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
    fi
}

# Pulls the changes to current branch from origin and merge
# Pull is fetch + merge
gpull() {
	if cBranch=$(git symbolic-ref --short -q HEAD)
	then
		git pull origin $cBranch --rebase --prune
		#git pull origin $cBranch
	else
		echo "not on any branch"
	fi
}

# Updates your current branch with origin/master even when you dont have uncommitted changes
# sync with origin/master and then put your changes back
gfupdate() {
	if cBranch=$(git symbolic-ref --short -q HEAD)
	then
		echo "====== Branch $cBranch ====="
		git checkout $cBranch 
		gpull
		git checkout $cBranch
		#git rebase $cBranch
	else
		echo "Not on any branch"
	fi
}

gupdate() {
	git stash
	gfupdate
	git stash pop
}


# Commit the files (on current branch) with the given message
# It will incluide all the files that have been modified and deleted.
# For new files you have to manually stage them using 'git add .'
gcommit() {
    local message=$@
    if [ -z "${message// }" ]
        then echo "Commit message missing"
    else
        git commit -am "$message"
    fi
}

# Regular push current branch to origin
# It will not push the master branch
gpush() {
    if [ -z $1 ]
        then echo "Need the name of the branch"
    else
        git push origin HEAD:refs/for/$1
    fi
}

# Updates your fork from upstream master and pushes the updates to your origin fork 
gupdateFork() {
    git checkout master
    git fetch upstream master
    git merge upstream/master
    push master
}

# Rebase your current branch for last n($1) commits
# Its going to be interactive
grebase() {
    if [ -z $1 ] 
        then val=2
    else
        val=$1
    fi
    git rebase -i HEAD~$val
}

# Force push current branch to origin
# It will not force push the master branch
gfpush() {
    if [ -z $1 ]
        then echo "Need the name of the branch"
    else
        if [ "$1" == "master" ]
            then echo "Cant force push to master"
        else    
            git push --force-with-lease origin $1
        fi    
    fi
}
