#!/usr/bin/expect -f

if { $argc < 3 } {
	puts "Usage: auto_ssh <server> <username> <password>\n"
	exit
}
set server [lindex $argv 0]
set username [lindex $argv 1]
set password [lindex $argv 2]

source ./detect_prompt

puts "preparing script, please wait ..."
log_user 0
spawn bash -i
lappend session_list $spawn_id
set spawn_id [lindex $session_list 0]
send {PS1='x\r\n\j\r\n\t@\u\@]\#]]]'}
send \r
set prompt [detect_prompt 2]
log_user 1

#puts "Prompt is : $prompt"

set timeout 300

match_max 100000
log_user 0
if [file exists ~/.ssh/id_rsa] {
	set cmd "ssh-keygen -t rsa -e -l"
} else {
	set cmd "ssh-keygen -t rsa"
}
send -- "$cmd\r"
expect {
	-re "Enter file in which the key is.*id_rsa.*:" {
		send -- "\r"
		exp_continue
	}
	-re "Enter file in which to save the key.*:" {
		send -- "\r"
		exp_continue
	} 
	-re "Overwrite (y/n)?" {
		send -- "y\r"
		exp_continue
	}
	-re "Enter passphrase.*:" {
		send -- "\r"
		exp_continue
	}
	-re "Enter same passphrase again:" {
		send -- "\r"
		exp_continue
	}
	-re ".*id_rsa.pub \(RSA\)" {
		send -- "\r"
	}
	-re "The key fingerprint is:.*preetham@.*$" {
		send -- "\r"
	}
	-re "$prompt" {
		send -- "\r"
	}
}
log_user 1
expect -re $prompt
#puts "buffer $expect_out(buffer)"

send -- "ssh $username@$server mkdir -p .ssh\r"
expect {
	-re "Are you sure you want to continue connecting (yes/no)?" {
		send -- "yes\r"
		exp_continue
	}
	-re ".*assword:" {
		send -- "$password\r"
		exp_continue
	} 
	-re "$prompt" {
		send -- "\r"
	}
}
set cmd "cat ~/.ssh/id_rsa.pub | ssh $username@$server 'cat >> ~/.ssh/authorized_keys'"

send -- "$cmd\r"
expect {
	"assword:" {
		send -- "$password\r"
		exp_continue
	} "$prompt" }
		send -- "\r\r"
	}
}
#expect -re $prompt

puts "\n"



exit
